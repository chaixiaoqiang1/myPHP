新增slave端时：
	需要在新的机器上部署eastblue项目
	在app中增加对应的api_key和api_sign参数
	时区参数的设置(这里注意运营后台如果新增区域要合理设置时区)

增加新的平台时：
	除了和平台对接接口的测试之外，还要注意一些脚本的设置，比如留存脚本等(同时确保slaveserverbasecontroller中能根据platform_id正确计算到的官网的数据库库名)
	
新增游戏时：
	如果是页游
		如果是自研三国女神类页游，把新游戏加到导日志的脚本中
		如果是代理页游，处理方式同代理手游
		如果是新类型---待定
	如果是手游
		如果是代理手游，注意处理一下pay_order中查询订单信息的规则，有类似的游戏的话加到判断中，没有的话新增一个查询逻辑
		如果是自研手游
			如果是学妹类游戏，联系运维在对应的slave端上增加游戏后台数据库的配置，同时修改对应slave端上开新服的脚本，判断如果是学妹类游戏则只建库，不需要建表（建表语句在导日志脚本中），同时需要在game_config文件中增加对应的配置，把新增的game_id写入mnsggameids数组，mobilegames数组，all_mobilegameids数组并新增一个game_id为key的数组项，添加必要的数据，在配置完成之后联系运维测试导日志的脚本等
			如果是夜夜类游戏，创建服务器后删除对应日志库中原有的数据表，从别的夜夜三国游戏日志库拷贝一份表结构导入，联系运维在对应的slave端上增加游戏后台数据库的配置，同时需要在game_config文件中增加对应的配置，把新增的game_id写入yysggameids数组，mobilegames数组，all_mobilegameids数组并新增一个game_id为key的数组项，添加必要的数据，在配置完成之后联系运维测试导日志的脚本等
			如果是新类型---待定

手游日志库新增数据表的时候：(注意添加合适的索引)
	夜夜三国类:（ImportYYSGLogDataIntoDB）
		新增的数据表需要在脚本中创建，原因是脚本运行在的机器越来越多，直接去创建有些低效（在createTable方法内添加新表）
		需要在脚本上面的fields里添加表名和主键对应的一条数据，然后根据表中是否有player_id，to_player_id，或者其他与player_id相关的字段来判断或者新增这个表的处理逻辑到import方法中
		(总体来说，夜夜三国导日志要把全球的日志库根据各个平台来区分开，区分的根据就是log_create_player表里面的platform_id，因此我们导数据的时候，都是从任何一个表join到log_create_player表上来判断玩家是否属于当前执行的脚本所在的国家，并且根据日志库中目前表中最大的主键来判定从游戏后端数据库的查询起始位置，所以每个表中都要找到和player_id相关的字段)
	萌娘三国类:（ImportMNSGDataIntoDB脚本先根据游戏找到不同的服，并根据不同的服务器再启动ImportMNSGLogDataIntoDB脚本来导数据）
		新增的数据表需要在脚本中创建，首先fields里添加表名和对应的主键，createTableSqls中添加表名和对应的建表语句
		之后根据表中是否有player_id字段或者其他和player_id意义相同的字段来判断玩家是否属于当前启动脚本的服务器，计算是否属于某个服务器的时候是根据萌娘的player_id特性计算的，player_id介于100000*server_id + 25000 和 100000*(server_id+1) + 25000之间

新增游戏检测是否正常的逻辑步骤应该是
	1、后台创建服务器之后测试是否能连上游戏的接口
	2、根据情况处理创建服务器之后脚本在slave机器上创建日志库的格式
	3、处理游戏的日志，使之能正常导入日志库
	4、后续的一些处理，如留存脚本等是否能正常调用的新游戏（创建新平台的时候需要新增脚本）


对数据库的说明:
	官网数据库：qiqiwu系列数据库，出特殊的几个之外命名规则为qiqiwu_(platform_id)，即如果平台id是10，则为qiqiwu_10
	支付数据库：与官网数据库相同的命名规则，只是前缀由qiqiwu换成了payment
	日志库：命名规则为(game_id).(server_internal_id)，即如果是game_id为4的游戏的server_internal_id为109的服务器，则日志库为`4.109`，数据库名中带有点号的时候需要用反引号引起来，否则可能会被当做是数据库名为4的数据库中的109数据表

各个数据库中的常用表：
	官网数据库：
		users: 存储的是官网注册的用户的信息，source，u，u2是玩家的广告渠道，有些有game_source字段，有些有game_id字段，需要特殊注意
		create_player：存储的是玩家创建游戏角色的信息，单平台单游戏的可能没有game_id字段，此表内的server_id其实是server_internal_id，特别的，夜夜三国没有调用官网接口，因此各个平台上的夜夜三国在这张表里都没有创建数据
		device_list: 存储的是所有的设备信息，每个安装此平台下的游戏的设备将被记录到这个设备表中，source，campaign，term和users表里的source，u，u2是有对应的相同意义的，limit_type表示的是这个设备是否被封禁。
		login_device：存储的是玩家和设备的对应关系，此表的数据有uid+game_id+device_id；联合唯一。
		server_list：存储的是这个平台下所有的服务器信息，除了create_player表之外的官网以及支付数据库中的其他表中出现的server_id对应的都是这张表中的server_id字段。
		             这张表中存有server_internal_id，可以用这张表来对应server_internal_id和server_id
		third_party: 存储的是第三方信息，其中的tp_code代表的是存储的是哪个第三方的信息，常见的有fb，可以用来限制fb用户，从users表join过来on的条件为user.uid=third_party.uid同时限制tp_code='fb'
		game_package: 存储的是游戏包的信息，最后一个字段sdk_ad_info是此游戏包的广告信息
		google_validate: 存储的是谷歌验证用到的一些信息

	支付数据库：
		pay_order：存储的是所有的订单信息，重要字段有pay_user_id与官网的uid对应，get_payment = 1表明付款成功，pay_time是支付时间，有game_id及server_id及player_id用来唯一确定此订单对应的玩家
		除了pay_order表之外还可能用到的表有
		pay_type,payment_activity,payment_method几个表明支付方式活动以及支付方式区分的表
		game_product,game_product_price表明一些游戏物品以及价格
		giftbag_list,gift_price_list表明一些游戏礼包以及价格

	游戏日志库：（手游和页游的字段可能有部分的对应差别）
		log_create_player：是对应服务器的玩家创建信息，保存有玩家的官网uid
		log_login：是对应服务器的玩家登陆信息，保存有玩家每次登入登出的时间以及当时级别等信息
		log_economy：是对应服务器的消费信息，玩家的各种经济变动等都在这张表上体现，存有每个经济变动的操作原因
		log_levelup：存有玩家的每次升级信息，升级时间以及从何级别升到何级别
		log_retention：存有每天的留存率等信息，是由每天凌晨各个机器以服为单位进行计算然后存入的

		其他的表可能手游页游的差别就比较大了
		手游有log_player_name表：保存有玩家的更名信息等，每个玩家的历史名字都在里面有记录，最后的一条是玩家目前的名字

关于页面上选择服务器的服务器取值：
	1.凡是要连接游戏服务器的，都用getUnionServers();
	2.凡是单纯只查游戏日志库的，不涉及一次性表，例如log_create_player,log_levelup等表的，都使用getUnionServers();
	3.涉及到充值信息并根据服务器选择或者分组的时候，需要获取所有服务器;
	4.一些具体的还需要具体对待;

部分功能简述：

1：更新item表：---此功能给所有有item表的游戏运营开通
功能--key：game-server-api/upload/items
页面可输入参数：选择文件(必选)
页面可操作项目：上传
后台：根据game_id以及已分离的item数组判断该文件应该替换哪个文件并命名，将处理结果返回前段并alert
备注：此功能使用的是ajax，并没有使用angularjs
最后修改日期----2015-08-26--潘达

2：GM已回复列表：此功能用于查询GM已经回复的玩家反馈信息
key(页游):game-server-api/gm/replied
key(手游)：game-server-api/yysg/gm-replied
用法：选择服务器和时间，玩家昵称为可选参数是GM昵称，页游还可以选择所要查询的反馈信息的类型。输入GM昵称则查询出所选时段内该GM所有已回复的相关信息，如果不输入昵称，则查询的为所选时段类的所有已回复的相关信息。
后台：该功能是查询eastblue数据库中的gm表得到的数据，手游的user_id和player_id字段的值存反了
最后修改日期----2015-08-26--锥生零

3：手游GM聊天功能：该功能用于回复玩家反馈的信息和查询与玩家的聊天记录(和页游的玩家未回复列表类似)
key:game-server-api/yysg/gmTalk
用法：打开功能则返回有未回复消息的玩家id,输入玩家id点击查询则查询出和玩家的聊天，默认查询出10条记录，可以自己输入要查询的消息条数；输入要回复该玩家的消息，点击发送则将消息返回给玩家。
后台：该功能的查询回复都是调用游戏接口来完成的，查询时从游戏那边取出的数据会判断该条反馈信息是否已经回复过（和GM库中取出的id对比）,如果回复过则不显示；回复玩家的时候如果游戏端返回状态正确，则会将该条数据存入eastblue数据库的GM表中。
最后修改日期----2015-08-26--锥生零

异常订单自动报警脚本--RechargeFailAlert.php 文件
此脚本位于master端
脚本内的数据有各个游戏的game_id以及发件人及邮件主题等
脚本设置每隔30分钟执行一次，执行时将对每个game_id进行循环，连接到游戏对应的日志库及官网从库服务器上
查询pay_order表，取出其中get_payment=1以及offer_yuanbao=0并介于运行脚本到运行脚本前三十分钟之内且game_id对应所查游戏的订单。
将这些订单按照格式化的形式发给运营，财务以及平台部门。
如果新增游戏，在脚本中新增游戏的信息即可，可以在加入游戏日报的时候同时加入。
最后修改日期----2015-09-09--潘达


全服剩余元宝---此功能用来查询服务器剩余的元宝数		此功能准备修改，女神由于查询过慢，因此准备通过游戏的接口直接查询线上的数据库
功能---key: game-server-api/server/remain
此功能主要过程为：
连接slave端查询payment数据库中的payment_user表left join对应服务器的游戏日志库中的log_create_player表，取出所有的能得到的log_create_player表中的player_id和player_name
对每个player_id，连接到游戏服务器，通过id查询玩家的信息。0xbb13接口。
将每个返回值中的元宝数相加得到结果。
将所有结果相加得到总计。
最后修改日期----2015-09-02--潘达


页游查询玩家消费数据：该功能用于查询页游玩家在某段时间内元宝等物品的消费情况
key:slave-api/economy/player
用法：具体参考视图页面上的提示
后台：该功能主要查询经济日志库log_economy表，风流三国还有一个log_economy_extra表和log_rings,
风流三国某些字段要在后面的两个表中查询
---最后修改日期--2015-09-09--锥生零


关于萌娘三国日志导入脚本--ImportMNSGDataIntoDB.php(总) ImportMNSGLogDataIntoDB.php（子） 文件
：该脚本用于导入萌娘三国的日志数据
导入过程：为了方便区分服导数据，萌娘导日志时使用总脚本取qiqiwu库中server_list表的所有萌娘三国的服，循环每个服调子脚本导日志的方式。
由于游戏中多个服的数据是存在一起的但是使用运营后台查询的时候希望是区分服查询的，所以在导的过程我们对数据是分服导入的，由于每个服的玩家ID开头就是他所在的服的server_internal_id的值，所以导入的时候用每个表中的player_id字段区分服务器（如果以后有些表没有player_id那就全部导入不对服务器进行区分）
特殊导入log_create_player表：
导入此表时应为player_id是主键，而我们从游戏那别的数据库中取数据的时候是更具日志库中的主键位置来判断要取数据的位置的，所以为了减少后面的服开始导数据时取多余的数据，该表在取数据时多加了玩家ID取值范围的判断
最后修改日期----2015-09-09--锥生零---=======
最后修改日期----2015-09-02--潘达


手游玩家在线时长---此功能用来查询手游的平均玩家在线时长
功能---key: game-server-api/mg/avgonlinetime
此功能主要过程为：
读取页面输入值，发送给slave端，查询slave端对应的log_login表，读取时间段内以及等级段内的玩家信息并返回
在slave端计算我们需要的信息，返回给master端。
最后修改日志----2015-09-09--潘达


注册用户统计--运营---此功能用来统计某个服务器或者全服在某段时间内的匿名非匿名注册数量以及对应的创建角色数量，其中创建角色数量区分服务器
功能---key:	slave-api/users/signnum
此功能的主要过程为:
获取服务器信息，判断是否全服或者个别服
若全服--连接slave端，查询对应的官网数据库中的user表和create_player表，特别的如果是夜夜三国，则查询user表和日志库中的log_create_player表
若个别服--连接slave端，与全服相同的查询，不过在leftjoin create_player表或者log_create_player表的时候，加上server_id的判断，且只有第一个服务器的时候查询统计注册人数，后面只统计创建人数，因为users表无法判断玩家所属服务器，因此不管如何查询，注册人数总是此段时间内的所有服务器的注册人数
